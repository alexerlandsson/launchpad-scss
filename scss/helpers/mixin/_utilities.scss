/// Utility mixins

@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "../breakpoint" as breakpoint;

// Remove outer vertical margins from first and last direct child
@mixin remove-direct-child-outer-margins {
  & > * {
    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

// Hide scrollbar in scrollable elements
@mixin hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

// Generate breakpoint specific classes from a selector
// The selectors uses the format "[SELECTOR]:[BREAKPOINT_NAME]", example: ".foo:sm".
@mixin breakpoint-classes($filter: map.keys(breakpoint.$breakpoints)) {
  // Loop each breakpoint in $breakpoints to create it's unique selector
  @each $breakpoint, $media-query in breakpoint.$breakpoints {
    // Check if breakpoint is included in $filter
    @if list.index($filter, $breakpoint) {
      // Use :is() with #breakpoint-important to increase specificity
      :is(&\:#{$breakpoint}, #breakpoint-important) {
        @media #{meta.inspect($media-query)} {
          @content;
        }
      }
    }
  }

  @content;
}

// Translate psuedo element content depending on [lang] set on html node
// Map example: (en: "string", sv: "string", none: "string")
// Use locale name "none" to set a fallback value if html[lang] is not set
@mixin translate-psuedo-content($translation-map) {
  @if meta.type-of($translation-map) == map {
    @each $locale, $string in $translation-map {
      @if $locale == "none" {
        content: "#{$string}";
      } @else {
        html[lang="#{$locale}"] & {
          content: "#{$string}";
        }
      }
    }
  } @else {
    @error "Translations needs to be set using a map where key is set to locale and value to the translated string.";
  }
}
